// <auto-generated />
using Storage.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Storage.Migrations
{
    [DbContext(typeof(StorageContext))]
    partial class StorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Storage.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<int>("Echo");

                    b.Property<int>("Experience");

                    b.Property<string>("Faction");

                    b.Property<int>("Fortune");

                    b.Property<int>("Judgement");

                    b.Property<int>("Level");

                    b.Property<int>("Magnetism");

                    b.Property<int>("Might");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Spryness");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Bio = "Driven to drink by mediocrity.",
                            Echo = 8,
                            Experience = 0,
                            Fortune = 15,
                            Judgement = 6,
                            Level = 2,
                            Magnetism = 9,
                            Might = 10,
                            Name = "Garrick",
                            Spryness = 12
                        },
                        new
                        {
                            CharacterId = 2,
                            Bio = "Small business owner.",
                            Echo = 15,
                            Experience = 0,
                            Fortune = 1,
                            Judgement = 1,
                            Level = 5,
                            Magnetism = 15,
                            Might = 15,
                            Name = "Nori",
                            Spryness = 15
                        },
                        new
                        {
                            CharacterId = 3,
                            Bio = "A small dragon in a big body",
                            Echo = 1,
                            Experience = 0,
                            Fortune = 6,
                            Judgement = 15,
                            Level = 10,
                            Magnetism = 8,
                            Might = 25,
                            Name = "Ulstyr",
                            Spryness = 10
                        });
                });

            modelBuilder.Entity("Storage.Models.CharacterTrait", b =>
                {
                    b.Property<int>("CharacterTraitId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<int>("TraitId");

                    b.HasKey("CharacterTraitId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TraitId");

                    b.ToTable("CharacterTraits");
                });

            modelBuilder.Entity("Storage.Models.Trait", b =>
                {
                    b.Property<int>("TraitId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Echo");

                    b.Property<int>("Fortune");

                    b.Property<int>("Judgement");

                    b.Property<int>("Magnetism");

                    b.Property<int>("Might");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Spryness");

                    b.HasKey("TraitId");

                    b.ToTable("Traits");

                    b.HasData(
                        new
                        {
                            TraitId = 1,
                            Echo = -3,
                            Fortune = 0,
                            Judgement = 0,
                            Magnetism = 0,
                            Might = 1,
                            Name = "Hardheaded",
                            Spryness = 1
                        },
                        new
                        {
                            TraitId = 2,
                            Echo = 0,
                            Fortune = 0,
                            Judgement = 0,
                            Magnetism = 0,
                            Might = -1,
                            Name = "Wimpy",
                            Spryness = 2
                        },
                        new
                        {
                            TraitId = 3,
                            Echo = 0,
                            Fortune = -10,
                            Judgement = 4,
                            Magnetism = 0,
                            Might = 1,
                            Name = "Big Booty",
                            Spryness = 0
                        });
                });

            modelBuilder.Entity("Storage.Models.CharacterTrait", b =>
                {
                    b.HasOne("Storage.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Storage.Models.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
